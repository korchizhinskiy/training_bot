import logging
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.filters import Command

from tgbot.filters.role import Role_Filter
from tgbot.keyboards.inline_keyboards.admin.menu import Button, get_menu_markup
from tgbot.misc.alias import DayOfWeek
from tgbot.misc.callback_data import MyCallbackData
from tgbot.models.role import UserRole

from tgbot.services.repository import Repo, UserRepo
from tgbot.states.user.menu import UserTrainingMenu



user_menu_router = Router()
logger = logging.getLogger(__name__)
logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
        )

# Can use other variants:
# @admin_welcome_router.message(Role_Filter(user_role=[UserRole.ADMIN]), commands=["check"])
# @admin_welcome_router.message(Role_Filter(user_role=[UserRole.ADMIN, UserRole.USER]), commands=["check"])

@user_menu_router.message(Role_Filter(user_role=UserRole.USER), Command(commands=["start"]), flags={"database_type": "repo"})
async def admin_welcome(message: Message, repo: Repo) -> None:
    if await repo.add_user(message.from_user.id, message.from_user.first_name):
        await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üëã\n"
                f"–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä, –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.\n"
                f"–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å —Ü–µ–ª—è–º–∏ üí™\n"
                f"–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π, —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—É–Ω–∫—Ç–æ–º \"–ú–µ–Ω—é\" –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.\n"
                f"–£–¥–∞—á–∏ —Ç–µ–±–µ, –∞ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!üòé"
                )
    else:
        await message.answer(f"{message.from_user.first_name.capitalize()}, –ø—Ä–∏–≤–µ—Ç. –°–Ω–æ–≤–∞ —Ä–∞–¥ –≤—Å—Ç—Ä–µ—á–µ. –ü–æ–º–Ω–∏—à—å, –∫–∞–∫ –º–Ω–æ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? üëΩ ")


@user_menu_router.message(Role_Filter(user_role=UserRole.USER), Command(commands=["exercises"]), flags={"database_type": "user_repo"})
async def print_all_exercises(message: Message, repo: UserRepo) -> None:
    """ Print all exercises. """
    exercises = await repo.print_exercise()
    await message.answer("<b>–í–µ—Å—å —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.</b>" + "\n\n‚¶ø " + "\n‚¶ø ".join(exercises))


#!<--- TRAINING --->

#TODO: Add ordering
@user_menu_router.message(Role_Filter(user_role=UserRole.USER), state=UserTrainingMenu.add_exercise.read_count_repetition, flags={"database_type": "user_repo"})
async def output_result_of_add_exercise(message: Message, state: FSMContext, repo: UserRepo) -> None:
    exercise_count_repetition = message.text.strip()
    state_data = await state.get_data()
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {state_data['exercise_name']}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ - {state_data['exercise_count_approaches']}\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - {exercise_count_repetition}")
    await repo.add_exercise_into_training_day(message.from_user.id, state_data['week'], state_data['day'], state_data['exercise_name'],
            state_data['exercise_count_approaches'], exercise_count_repetition)
    await state.clear()


@user_menu_router.message(Role_Filter(user_role=UserRole.USER), state=UserTrainingMenu.add_exercise.read_count_approaches)
async def ask_exercise_count_repetition(message: Message, state: FSMContext) -> None:
    exercise_count_approaches = message.text.strip()
    await state.update_data(exercise_count_approaches=exercise_count_approaches)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
    await state.set_state(UserTrainingMenu.add_exercise.read_count_repetition)


@user_menu_router.message(Role_Filter(user_role=UserRole.USER), state=UserTrainingMenu.add_exercise.read_exercise_name)
async def ask_exercise_count_approaches(message: Message, state: FSMContext) -> None:
    exercise_name = message.text.strip().capitalize()
    await state.update_data(exercise_name=exercise_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤")
    await state.set_state(UserTrainingMenu.add_exercise.read_count_approaches)


@user_menu_router.callback_query(Role_Filter(user_role=UserRole.USER), MyCallbackData.filter(), 
                                 state=UserTrainingMenu.add_exercise.read_day)
async def ask_exercise_name(call: CallbackQuery, callback_data: MyCallbackData, state: FSMContext) -> None:
    """ Ask about days of changing. """
    #// Get number of day.
    day = callback_data.training
    await state.update_data(day=day)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await state.set_state(UserTrainingMenu.add_exercise.read_exercise_name)


@user_menu_router.callback_query(Role_Filter(user_role=UserRole.USER), MyCallbackData.filter(), 
        state=UserTrainingMenu.add_exercise.read_week, flags={"database_type": "user_repo"})
async def choice_of_change_day(call: CallbackQuery, repo: UserRepo, callback_data: MyCallbackData, state: FSMContext) -> None:
    """ Ask about days of changing. """
    #// Get number of day.
    week = callback_data.training.split('_')[0]
    await state.update_data(week=int(week))
    days = await repo.check_user_chart_week_day(call.from_user.id, int(week))
    markup = await get_menu_markup([
        [Button(text=f"{DayOfWeek.get_value(int(day))}", callback_data=MyCallbackData(training=f"{int(day)}").pack())] for day in days
        ])
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=markup)
    await state.set_state(UserTrainingMenu.add_exercise.read_day)


@user_menu_router.callback_query(Role_Filter(user_role=UserRole.USER), MyCallbackData.filter(), flags={"database_type": "user_repo"})
async def choice_of_change_week(call: CallbackQuery, repo: UserRepo, callback_data: MyCallbackData, state: FSMContext) -> None:
    """ Answer for callback query of change training days. """
    if callback_data.training == "delete_exercise_from_training_day":
        await call.answer("–í—ã–±—Ä–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ")

    elif callback_data.training == "add_exercise_to_training_day":
        weeks = await repo.check_user_chart_week_number(call.from_user.id)
        markup = await get_menu_markup([
            [Button(text=f"{week}-—è –Ω–µ–¥–µ–ª—è", callback_data=MyCallbackData(training=f"{week}_week").pack())] for week in weeks
            ])
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å.", reply_markup=markup)
        await state.set_state(UserTrainingMenu.add_exercise.read_week)


@user_menu_router.message(Role_Filter(user_role=UserRole.USER), Command(commands=["training"]), flags={"database_type": "user_repo"})
async def change_training_day(message: Message, repo: UserRole) -> None:
    """ Print user's training from database. """
    markup = await get_menu_markup([
        [Button(text="–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–Ω—è", callback_data=MyCallbackData(training="delete_exercise_from_training_day").pack())],
        [Button(text="–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å", callback_data=MyCallbackData(training="add_exercise_to_training_day").pack())],
        ])
    await message.answer("–ü—É–Ω–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏", reply_markup=markup)


#!<--- CHART --->
@user_menu_router.message(Role_Filter(user_role=UserRole.USER), Command(commands=["chart"]), flags={"database_type": "user_repo"})
async def change_chart(message: Message, repo: UserRepo) -> None:
    """ Set/change own chart. """
    if await repo.check_user_chart_week_number(message.from_user.id):
        markup = await get_menu_markup([
            [Button(text="–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="training_chart")]
            ])
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", reply_markup=markup)
    else:
        pass
        #TODO: Add training into user's database.


@user_menu_router.callback_query(Role_Filter(user_role=UserRole.USER), text="training_chart", flags={"database_type": "user_repo"})
async def print_training(call: CallbackQuery, repo: UserRepo) -> None:
    """ Print user's training from database. """
    training_list: str = ''
    weeks_count = await repo.check_user_chart_week_number(call.from_user.id)
    for week in weeks_count:
        training_list += f"–ù–µ–¥–µ–ª—è {week}-—è:\n"
        days = await repo.check_user_chart_week_day(call.from_user.id, week)
        logger.info(f"{days = }")
        for day in days:
            day_name = DayOfWeek.get_value(day)
            training_list += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ - {day_name}\n"
            exercises = await repo.check_user_chart_exercises(call.from_user.id, week, day)
            for exercise in exercises:
                training_list += f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise[0][3]}\n{exercise[0][0]}\n–ü–æ–¥—Ö–æ–¥—ã: {exercise[0][1]}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {exercise[0][2]}\n"
    await call.message.answer(training_list)

